"""Telegram bot handlers for AI Mediator."""
import logging
from typing import List
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from service.session_service import SessionService
from service.message_service import MessageService
from config.settings import Settings
from domain.entities import OutboundMessage, PendingTarget

logger = logging.getLogger(__name__)


class TelegramHandlers:
    """Main Telegram bot handlers."""
    
    def __init__(
        self,
        session_service: SessionService,
        message_service: MessageService,
        settings: Settings,
        bot=None
    ):
        self.session_service = session_service
        self.message_service = message_service
        self.bot_username = settings.telegram_bot_username
        self.bot = bot  # Store bot instance for sending messages

        # Validate bot username is set
        if not self.bot_username:
            raise ValueError("TELEGRAM_BOT_USERNAME must be set in environment variables")
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /start command."""
        user = update.effective_user
        user_id = user.id
        username = user.username
        
        logger.info(f"Received /start from user {user_id} (@{username or 'no_username'})")
        
        # Check if this is an invite link: /start invite_code
        if context.args:
            invite_code = context.args[0]
            await self._handle_invite_join(update, invite_code, user_id, username)
        else:
            # Regular start - create new session
            await self._handle_session_creation(update, user_id, username)
    
    async def _handle_session_creation(self, update: Update, user_id: int, username: str):
        """Create new session for user."""
        try:
            session = await self.session_service.create_session(user_id, username)
            
            if session.status.value == "waiting_for_partner":
                await update.message.reply_text(
                    f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI Mediator!\n\n"
                    f"–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: `{session.session_id[:8]}...`\n"
                    f"–°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞\n\n"
                    f"–ß—Ç–æ–±—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                    f"/invite",
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text(
                    f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è!\n\n"
                    f"ID: `{session.session_id[:8]}...`\n"
                    f"–°—Ç–∞—Ç—É—Å: {session.status.value}\n\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /invite –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞",
                    parse_mode='Markdown'
                )
                
        except Exception as e:
            logger.error(f"Error creating session: {e}")
            await update.message.reply_text(
                "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
    
    async def _handle_invite_join(self, update: Update, invite_code: str, user_id: int, username: str):
        """Join session via invite code."""
        try:
            success = await self.session_service.join_session(invite_code, user_id, username)

            if success:
                # Get session to start mediation
                session = await self.session_service.get_user_active_session(user_id)
                if session and session.status.value == "active":
                    # Get all participants for starting mediation
                    participants = await self.session_service.session_repo.get_session_participants(session.session_id)
                    participant_ids = [p.participant_id for p in participants]

                    # Start mediation automatically
                    logger.info(f"Auto-starting mediation for session {session.session_id}")
                    result = await self.message_service.start_mediation_session(
                        session.session_id,
                        participant_ids
                    )

                    # Deliver initial outbound messages
                    if result and result.outbox:
                        await self._deliver_outbound_messages(session.session_id, result.outbox)

                await update.message.reply_text(
                    f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Å–µ—Å—Å–∏–∏!\n\n"
                    f"ü§ñ AI –ú–µ–¥–∏–∞—Ç–æ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É.\n"
                    f"–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –º–µ–¥–∏–∞—Ç–æ—Ä–∞ –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞.\n\n"
                    f"–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –º–µ–¥–∏–∞—Ç–æ—Ä –±—É–¥–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –¥–∏–∞–ª–æ–≥."
                )
            else:
                await update.message.reply_text(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–µ—Å—Å–∏–∏.\n\n"
                    f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    f"‚Ä¢ –°—Å—ã–ª–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ (–¥–µ–π—Å—Ç–≤—É–µ—Ç 1 —á–∞—Å)\n"
                    f"‚Ä¢ –°—Å—ã–ª–∫–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞\n"
                    f"‚Ä¢ –°–µ—Å—Å–∏—è —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞\n"
                    f"‚Ä¢ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è\n\n"
                    f"–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –∫–æ–º–∞–Ω–¥–æ–π /invite"
                )
                
        except Exception as e:
            logger.error(f"Error joining session: {e}")
            await update.message.reply_text(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–µ—Å—Å–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
    
    async def invite_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /invite command - generate invite link."""
        user = update.effective_user
        user_id = user.id
        
        logger.info(f"Received /invite from user {user_id}")
        
        try:
            # Get user's active session
            session = await self.session_service.get_user_active_session(user_id)
            if not session:
                await update.message.reply_text(
                    "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏.\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏."
                )
                return
            
            # Generate invite
            invite = await self.session_service.create_invite(session.session_id, user_id)
            if not invite:
                await update.message.reply_text(
                    "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
                return
            
            invite_url = f"https://t.me/{self.bot_username}?start={invite.invite_code}"

            # Log invite link creation for debugging
            logger.debug(f"Generated invite link: {invite_url}")

            # Create inline keyboard with button
            keyboard = [[InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É", url=invite_url)]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                f"üîó –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—É.\n\n"
                f"–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç 1 —á–∞—Å\n"
                f"–ü–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–∞—Ä—Ç–Ω–µ—Ä –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è –∫ –≤–∞—à–µ–π —Å–µ—Å—Å–∏–∏",
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"Error creating invite: {e}")
            await update.message.reply_text(
                "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle regular text messages."""
        user = update.effective_user
        user_id = user.id
        message_text = update.message.text
        telegram_message_id = update.message.message_id

        logger.info(f"Received message from user {user_id}: {message_text[:50]}...")

        try:
            # Check if user has active session
            session = await self.session_service.get_user_active_session(user_id)
            if not session:
                await update.message.reply_text(
                    "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏.\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –∏–ª–∏ "
                    "–ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é –æ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞."
                )
                return

            # Get user's participant info
            participant = await self.session_service.session_repo.get_participant_by_telegram_id(
                session.session_id, user_id
            )
            if not participant:
                await update.message.reply_text(
                    "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ."
                )
                return

            # Process message through LangGraph agent
            result = await self.message_service.resume_user_message(
                session.session_id,
                participant.participant_id,
                telegram_message_id,
                message_text
            )

            if result:
                # Deliver outbound messages from agent
                if result.outbox:
                    await self._deliver_outbound_messages(session.session_id, result.outbox)

                # Send status update to sender
                status_msg = f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –º–µ–¥–∏–∞—Ç–æ—Ä–æ–º"
                if result.phase:
                    status_msg += f"\nüìç –§–∞–∑–∞: {result.phase.value}"
                if result.pending_for:
                    status_msg += f"\n‚è≥ –û–∂–∏–¥–∞–µ–º: {result.pending_for.value}"

                await update.message.reply_text(status_msg)

            else:
                # Message was not processed (e.g., wrong turn, duplicate, etc.)
                await update.message.reply_text(
                    f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\n\n"
                    f"–í–æ–∑–º–æ–∂–Ω–æ, —Å–µ–π—á–∞—Å –Ω–µ –≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å –≥–æ–≤–æ—Ä–∏—Ç—å –∏–ª–∏ "
                    f"—Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ."
                )

            # Check for pending outbound messages and deliver them
            await self._check_and_deliver_pending_messages(session.session_id)

        except Exception as e:
            logger.error(f"Error handling message: {e}")
            await update.message.reply_text(
                "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )

    async def _deliver_outbound_messages(self, session_id: str, outbox: List[OutboundMessage]):
        """Deliver outbound messages to target participants."""
        try:
            for message in outbox:
                # Get target participants
                targets = await self.message_service.get_delivery_targets(session_id, message.target)

                delivery_results = {}

                for participant in targets:
                    try:
                        # Send message to telegram user
                        telegram_message = await self._send_message_to_user(
                            participant.telegram_user_id,
                            f"ü§ñ **AI –ú–µ–¥–∏–∞—Ç–æ—Ä:**\n\n{message.content}",
                            parse_mode='Markdown'
                        )

                        if telegram_message:
                            delivery_results[participant.participant_id] = telegram_message.message_id
                            logger.info(f"Delivered message {message.message_id[:8]}... to user {participant.telegram_user_id}")

                    except Exception as e:
                        logger.error(f"Failed to deliver message to user {participant.telegram_user_id}: {e}")

                # Mark message as delivered
                if delivery_results:
                    await self.message_service.mark_outbound_delivered(message.message_id, delivery_results)

        except Exception as e:
            logger.error(f"Error delivering outbound messages: {e}")

    async def _check_and_deliver_pending_messages(self, session_id: str):
        """Check for pending outbound messages and deliver them."""
        try:
            pending_messages = await self.message_service.get_pending_outbound_messages(session_id)
            if pending_messages:
                logger.info(f"Found {len(pending_messages)} pending messages for session {session_id}")
                await self._deliver_outbound_messages(session_id, pending_messages)
        except Exception as e:
            logger.error(f"Error checking pending messages: {e}")

    async def _send_message_to_user(self, telegram_user_id: int, text: str, **kwargs):
        """Send message to specific telegram user."""
        try:
            if self.bot:
                # Use actual bot instance to send message
                message = await self.bot.send_message(
                    chat_id=telegram_user_id,
                    text=text,
                    **kwargs
                )
                logger.info(f"Sent message to user {telegram_user_id}: {text[:50]}...")
                return message
            else:
                # Fallback when bot instance is not available
                logger.warning(f"Bot instance not available, mocking message to user {telegram_user_id}")

                class MockMessage:
                    def __init__(self):
                        self.message_id = 12345

                return MockMessage()

        except Exception as e:
            logger.error(f"Error sending message to user {telegram_user_id}: {e}")
            return None
