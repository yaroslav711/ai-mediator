#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –ø–µ—Å–æ—á–Ω–∏—Ü–∞ –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏.
–ü–æ–∑–≤–æ–ª—è–µ—Ç –±—ã—Å—Ç—Ä–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤.

–£—Å—Ç–∞–Ω–æ–≤–∫–∞: uv sync --extra tools
–ó–∞–ø—É—Å–∫: python tools/prompt_playground.py
"""

import sys
from pathlib import Path
from typing import List, Dict

import click
from openai import OpenAI
from rich.console import Console
from rich.markdown import Markdown
from rich.panel import Panel
from rich.prompt import Prompt

# –î–æ–±–∞–≤–ª—è–µ–º shared –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent.parent / "shared"))

console = Console()


class PromptPlayground:
    def __init__(self, openai_api_key: str):
        self.client = OpenAI(api_key=openai_api_key)
        self.prompts_dir = Path(__file__).parent.parent / "shared" / "prompts"
        self.current_prompt = self.load_current_prompt()

    def load_current_prompt(self) -> str:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç"""
        mediator_prompt = self.prompts_dir / "current" / "mediator_v1.md"
        system_rules = self.prompts_dir / "current" / "system_rules.md"

        prompt_parts = []

        if mediator_prompt.exists():
            prompt_parts.append(mediator_prompt.read_text(encoding="utf-8"))

        if system_rules.exists():
            prompt_parts.append(system_rules.read_text(encoding="utf-8"))

        return "\n\n".join(prompt_parts)

    def create_sample_conversation(self) -> List[Dict]:
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–∑–µ—Ü –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        return [
            {
                "user_id": "user_alice",
                "content": "–Ø —É—Å—Ç–∞–ª–∞ –æ—Ç —Ç–æ–≥–æ, —á—Ç–æ —Ç—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–º–æ–≥–∞–µ—à—å –ø–æ –¥–æ–º—É!",
                "timestamp": "2024-01-15T19:00:00Z",
            },
            {
                "user_id": "user_bob",
                "content": "–ù–æ —è —Ä–∞–±–æ—Ç–∞—é –±–æ–ª—å—à–µ —Ç–µ–±—è! –ö–æ–≥–¥–∞ —è –ø—Ä–∏–µ–∑–∂–∞—é, —Ö–æ—á–µ—Ç—Å—è –æ—Ç–¥–æ—Ö–Ω—É—Ç—å.",
                "timestamp": "2024-01-15T19:02:00Z",
            },
            {
                "user_id": "user_alice",
                "content": "–ê —è —á—Ç–æ, –Ω–µ —Ä–∞–±–æ—Ç–∞—é? –ò –µ—â–µ –¥–æ–º —Ç—è–Ω—É –Ω–∞ —Å–µ–±–µ!",
                "timestamp": "2024-01-15T19:03:00Z",
            },
        ]

    def format_conversation(self, messages: List[Dict]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∏–∞–ª–æ–≥ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞"""
        formatted = []
        for msg in messages:
            user = msg["user_id"]
            content = msg["content"]
            timestamp = msg.get("timestamp", "")
            formatted.append(f"[{timestamp}] {user}: {content}")

        return "\n".join(formatted)

    def test_prompt(self, conversation: str, custom_prompt: str = None) -> str:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç —Å –∑–∞–¥–∞–Ω–Ω—ã–º –¥–∏–∞–ª–æ–≥–æ–º"""
        system_prompt = custom_prompt or self.current_prompt

        user_prompt = f"""
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–∞—Ä—ã:

        {conversation}

        –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.
        """

        try:
            response = self.client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt},
                ],
                temperature=0.7,
                max_tokens=2048,
            )

            return response.choices[0].message.content

        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

    def interactive_mode(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º"""
        console.print(Panel.fit("üéÆ AI Mediator Prompt Playground", style="bold blue"))

        while True:
            console.print("\nüìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
            console.print("1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å –æ–±—Ä–∞–∑—Ü–æ–º –¥–∏–∞–ª–æ–≥–∞")
            console.print("2. –í–≤–µ—Å—Ç–∏ —Å–≤–æ–π –¥–∏–∞–ª–æ–≥")
            console.print("3. –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç")
            console.print("4. –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç")
            console.print("5. –í—ã–π—Ç–∏")

            choice = Prompt.ask("–í–∞—à –≤—ã–±–æ—Ä", choices=["1", "2", "3", "4", "5"])

            if choice == "1":
                self.test_with_sample()
            elif choice == "2":
                self.test_with_custom()
            elif choice == "3":
                self.edit_prompt()
            elif choice == "4":
                self.show_current_prompt()
            elif choice == "5":
                console.print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break

    def test_with_sample(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –æ–±—Ä–∞–∑—Ü–æ–º"""
        sample = self.create_sample_conversation()
        conversation = self.format_conversation(sample)

        console.print("\nüí¨ –û–±—Ä–∞–∑–µ—Ü –¥–∏–∞–ª–æ–≥–∞:")
        console.print(Panel(conversation, title="–î–∏–∞–ª–æ–≥"))

        console.print("\nü§ñ –ó–∞–ø—É—Å–∫ AI –º–µ–¥–∏–∞—Ç–æ—Ä–∞...")
        result = self.test_prompt(conversation)

        console.print("\nüìù –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        console.print(Panel(Markdown(result), title="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –º–µ–¥–∏–∞—Ç–æ—Ä–∞"))

    def test_with_custom(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –¥–∏–∞–ª–æ–≥–æ–º"""
        console.print("\n‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ª–æ–≥ (—Ñ–æ—Ä–º–∞—Ç: user_id: —Å–æ–æ–±—â–µ–Ω–∏–µ)")
        console.print("–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É")

        messages = []
        while True:
            line = Prompt.ask("–°–æ–æ–±—â–µ–Ω–∏–µ", default="")
            if not line:
                break

            if ":" in line:
                user_id, content = line.split(":", 1)
                messages.append(
                    {
                        "user_id": user_id.strip(),
                        "content": content.strip(),
                        "timestamp": "2024-01-15T19:00:00Z",
                    }
                )
            else:
                console.print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: user_id: —Å–æ–æ–±—â–µ–Ω–∏–µ")

        if not messages:
            console.print("‚ùå –î–∏–∞–ª–æ–≥ –ø—É—Å—Ç")
            return

        conversation = self.format_conversation(messages)

        console.print("\nü§ñ –ó–∞–ø—É—Å–∫ AI –º–µ–¥–∏–∞—Ç–æ—Ä–∞...")
        result = self.test_prompt(conversation)

        console.print("\nüìù –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        console.print(Panel(Markdown(result), title="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –º–µ–¥–∏–∞—Ç–æ—Ä–∞"))

    def edit_prompt(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞"""
        console.print("\n‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞")
        console.print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç (–¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –Ω–∞–∂–º–∏—Ç–µ Enter):")

        new_prompt = console.input()
        if new_prompt.strip():
            self.current_prompt = new_prompt
            console.print("‚úÖ –ü—Ä–æ–º–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!")
        else:
            console.print("‚ÑπÔ∏è –ü—Ä–æ–º–ø—Ç –Ω–µ –∏–∑–º–µ–Ω–µ–Ω")

    def show_current_prompt(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç"""
        console.print("\nüìã –¢–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç:")
        console.print(Panel(self.current_prompt, title="System Prompt"))


@click.command()
@click.option(
    "--api-key", envvar="OPENAI_API_KEY", required=True, help="OpenAI API –∫–ª—é—á"
)
@click.option("--batch", help="–§–∞–π–ª —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∏–∞–ª–æ–≥–∞–º–∏ –¥–ª—è batch —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
def main(api_key: str, batch: str):
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –ø–µ—Å–æ—á–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤ AI –º–µ–¥–∏–∞—Ç–æ—Ä–∞"""

    playground = PromptPlayground(api_key)

    if batch:
        # Batch —Ä–µ–∂–∏–º
        console.print(f"üì¶ Batch —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞: {batch}")
        # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å batch —Ä–µ–∂–∏–º
    else:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        playground.interactive_mode()


if __name__ == "__main__":
    main()
